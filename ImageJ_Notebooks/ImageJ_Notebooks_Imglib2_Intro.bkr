{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Java",
            "plugin": "Java",
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "text/x-java"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "sectionFLdwbe",
            "type": "section",
            "title": "ImgLib2: Introduction",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdowneXFCFn",
            "type": "markdown",
            "body": [
                "[ImgLib2](http://imagej.net/ImgLib2) is a general-purpose, multidimensional image processing library.  Writing code using ImgLib2 is independent of image dimensionality, data type, and data storage strategy.  It's designed to be reusable, to decouple algorithm development and data management, and to be extensible and adaptable through the addition of new algorithms, pixel types, and storage strategies.",
                "",
                "Find javadocs for Imglib2 [here](http://javadoc.imagej.net/ImgLib2/)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeqcbnVd",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "/////////////////////////////////////////////////////////////////",
                    "// Bootstrap ImageJ. This may take some minutes the first time,",
                    "// but will be fast on subsequent runs on the same computer.",
                    "@GrabResolver(name='imagej', root='http://maven.imagej.net/content/groups/public/')",
                    "@Grab(group='net.imagej', module='imagej', version='2.0.0-rc-50')",
                    "import net.imagej.ImageJ",
                    "/////////////////////////////////////////////////////////////////",
                    "",
                    "///////////////////////////////////////////////////////////////////////////////",
                    "// Define an object which houses some handy notebook functions. In particular,",
                    "// we include a way to display ImgLib images (i.e., RandomAccessibleInterval",
                    "// objects) directly inside the notebook here.",
                    "",
                    "import java.awt.image.BufferedImage",
                    "import net.imagej.display.ColorTables",
                    "import net.imglib2.RandomAccessibleInterval",
                    "import net.imglib2.converter.RealLUTConverter",
                    "import net.imglib2.display.projector.composite.CompositeXYProjector",
                    "import net.imglib2.display.screenimage.awt.ARGBScreenImage",
                    "",
                    "notebook = new Object() {",
                    "  BufferedImage display(RandomAccessibleInterval source) {",
                    "    return display(source, 0, 1, -1)",
                    "  }",
                    "  BufferedImage display(RandomAccessibleInterval source, int xAxis, int yAxis, int cAxis) {",
                    "    w = (int) source.dimension(xAxis)",
                    "    h = (int) source.dimension(yAxis)",
                    "    c = 1",
                    "    target = new ARGBScreenImage(w, h)",
                    "    converters = new ArrayList<RealLUTConverter>(c);",
                    "    for (int i=0; i<c; i++) {",
                    "      converters.add(new RealLUTConverter(0, 255, ColorTables.GRAYS))",
                    "    }",
                    "    proj = new CompositeXYProjector(source, target, converters, cAxis)",
                    "    proj.map()",
                    "    return target.image()",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 4411,
                "result": "script14719802214511453574080$1@4c417403",
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 38
        },
        {
            "id": "sectionlAC22Y",
            "type": "section",
            "title": "Accessibles",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownTa7Tew",
            "type": "markdown",
            "body": [
                "In ImgLib2, images are represented by [_Accessibles_](http://imagej.net/ImgLib2_-_Accessibles). Image here refers to any (partial) function from coordinates to values.",
                "",
                "In the following sections we will see how pixel values can be manipulated using [_Accessors_](http://imagej.net/ImgLib2_-_Accessors). _Accessors_ are obtained from _Accessibles_. ",
                "",
                "_Accessibles_ represent the data itself. Pixel images, procedurally generated images, views into images (for instance sub-images), interpolated images, sparse collections of samples, the list of local intensity maxima of an image, list of nearest neighbors, etc., are all examples of _Accessibles_."
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionV10NVP",
            "type": "section",
            "title": "Accessors",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownzA1iqb",
            "type": "markdown",
            "body": [
                "In ImgLib2, images are manipulated using [_Accessors_](http://imagej.net/ImgLib2_-_Accessors).  For pixel images, you can think of an accessor as a movable reference to a pixel.  It can be moved around the image, even to a pixel at specific coordinates.  It can be de-referenced to get the pixel value, and it can retrieve the current position.  The accessors provided by ImgLib2 typically implement [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) of  [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html).",
                "",
                "",
                ">_NOTE:_    ",
                ">Both, [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) and [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) implement the [Sampler](http://javadoc.imagej.net/ImgLib2/net/imglib2/Sampler.html) interface which allows to access pixel values. Both implement the [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) interface which allows to retrieve the accessors current >pixel coordinates. Both inherit (through Localizable) the [EuclideanSpace](http://javadoc.imagej.net/ImgLib2/net/imglib2/EuclideanSpace.html) interval which allows to get the number of dimensions of the image.",
                "",
                ">Note, that [Sampler](http://javadoc.imagej.net/ImgLib2/net/imglib2/Sampler.html), [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html), and [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) have a type paramer **< T >** that refers to the value type of the underlying image."
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionUdF2Lv",
            "type": "section",
            "title": "RandomAccess",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdowny0NufM",
            "type": "markdown",
            "body": [
                "[RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) provides n-dimensional random access through the [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html) interface. It can be used to access pixels at arbitrary integer coordinates. ",
                "",
                "The following code uses a RandomAccess to draw some white pixels into an image.",
                "",
                ">_NOTE:_",
                "> * **get()** is defined in the [Sampler](http://javadoc.imagej.net/ImgLib2/net/imglib2/Sampler.html) interface, so you can obtain pixel references from a Cursor in exactly the same way.",
                "> * Often, the **T** obtained from **Sampler < T >.get()** is a proxy object that is re-used internally. You should assume that moving the accessor invalidates the proxy. If you want to keep a permanent reference to a pixel, use the **Sampler < T >.copy()** method. In the above example, this would return a copy of the RandomAccess refering to the same pixel.",
                "> * The [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html), [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html), … interfaces are not restricted to accessors. In fact, many ImgLib2 entities are [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html). For instance, the [Point](http://javadoc.imagej.net/ImgLib2/net/imglib2/Point.html) class implements [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html) and [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html), and simply represents a n-dimensional coordinate. In your own code, whenever you have something that can provide coordinates, you should consider implementing [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownE8ltyF",
            "type": "markdown",
            "body": [
                "First, we will creat a 400x320 8-bit gray-level image."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeLsYhPl",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.img.array.ArrayImgs",
                    "",
                    "long[] dimensions = [400, 320]",
                    "img = ArrayImgs.unsignedBytes(dimensions)",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": "ArrayImg [400x320]",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 600,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "markdownAcDxee",
            "type": "markdown",
            "body": [
                "Next, we will create a [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) to the image. Img implements the [RandomAccessible](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccessible.html) interface, thus we can use randomAccess() to obtain one. The [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) has the same generic type, [UnsignedByteType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/integer/UnsignedByteType.html), as the image."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codel9df3A",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "r = img.randomAccess()",
                    "random = new Random()   "
                ]
            },
            "output": {
                "state": {},
                "result": "java.util.Random@2aa2fc64",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 611,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "markdowndU9enK",
            "type": "markdown",
            "body": [
                "Using a **for** loop, we will set 1000 random pixels to the value of 255 (ie. _white_).  ",
                "",
                "First, we obtain the _x_, _y_ coordiantes of a random pixel within the image boundaries (_lines 2-3_). ",
                "",
                "Then we position the [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) at those coordinates using **setPosition()** from the [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html) interface, which takes two parameters, the coordinate and the dimension (_lines 4-5_), so we set the coordinate in dimension 0 to the value _x_, and we set the coordinate in dimension 1 to the value _y_.  ",
                "",
                "In _line 6_, using **get()**, we retrieve the pixel value at that coordinate; this method retunrs an instance of the pixel value type [UnsignedByteType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/integer/UnsignedByteType.html) that acts as a reference to the pixel.  ",
                "",
                "Finally, we set the pixel value to 255 (ie. _white_) via this reference (_line 7_)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEz83wt",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "1000.times {",
                    "  x = ( int ) ( random.nextFloat() * img.max( 0 ) )",
                    "  y = ( int ) ( random.nextFloat() * img.max( 1 ) )",
                    "  r.setPosition( x, 0 )",
                    "  r.setPosition( y, 1 )",
                    "  t = r.get()",
                    "  t.set( 255 )",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 574,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "markdowncFLij3",
            "type": "markdown",
            "body": [
                "Now, the image can be displayed."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeJORUUV",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "notebook.display( img )"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "ImageIcon",
                    "imageData": "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",
                    "width": 400,
                    "height": 320
                },
                "selectedType": "Image",
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 2543,
                "height": 357
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "markdownJC1lzG",
            "type": "markdown",
            "body": [
                "Before we move on to the \"other\" accessor, [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html), let's consider a generalization of the previous example. Let's say we like setting random pixels, and because we plan to do this a lot in the future, we extract this functionality into a method.",
                "",
                "Easy enough. But what if we want to apply the method to images of another value type, e.g. **DoubleType** or **ARGBType**? What if we want to apply it to a 3D image? ImgLib2 allows you to write code that handles of this transparently. ",
                "",
                "In the following example, we write a function that sets 1000 random pixels to \"white\" no matter what."
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownqgeLHy",
            "type": "markdown",
            "body": [
                "We are going to write a **draw()** method that can be applied to many ImgLib2 constructs that are not pixel  [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html)s. For instance there are Views that employ on-the-fly coordinate transforms, sampled and interpolated data, etc.",
                "",
                "There is no need to restrict ourselves to [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html).  We need be able to get a [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html), so we need **RandomAccessible< T >**, and to get the number of dimensions and the extent in every dimension,  so we need [Interval](http://javadoc.imagej.net/ImgLib2/net/imglib2/Interval.html) and therefore use **RandomAccessibleInterval< T >**.",
                "",
                "However, with great power comes great responsibility… Taking a general [Interval](http://javadoc.imagej.net/ImgLib2/net/imglib2/Interval.html) means that we no longer can assume that the interval starts at coordinates (0,0,…,0). Thus we need to make a final modification to correctly draw between min and max of the interval."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEmBSUF",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import java.util.Random",
                    "import net.imglib2.*",
                    "  ",
                    "  stuff = new Object() {",
                    "def <T> void draw( final RandomAccessibleInterval< T > img, final T value ) {",
                    "  // get the number of dimensions",
                    "  final int n = img.numDimensions()",
                    "  // Taking a general Interval means that we no longer can assume ",
                    "  // that the interval starts at coordinates (0,0,…,0). Thus we need ",
                    "  // to make a final modification to correctly draw between min and max of the interval.",
                    "  final long[] min = new long[ n ]",
                    "  img.min( min )",
                    "  final long[] scale = new long[ n ]",
                    "  for ( int d = 0; d < n; ++d ) {",
                    "    scale[ d ] = img.max( d ) - min[ d ]",
                    "  }",
                    "  final long[] pos = new long[ n ]",
                    "",
                    "  // create a RandomAccess to the image (now the generic type, T)",
                    "  // Img implements the RandomAccessible interface, ",
                    "  // thus we can use randomAccess() to obtain one",
                    "  final RandomAccess< T > r = img.randomAccess()",
                    "  final Random random = new Random()",
                    "  for ( int i = 0; i < 1000; ++i ) {",
                    "    // loop over all dimensions when setting the position of the RandomAccess",
                    "    for ( int d = 0; d < n; ++d ) {",
                    "      pos[ d ] = min[ d ] + ( long ) ( random.nextFloat() * scale[ d ] )",
                    "    }",
                    "    // set the position",
                    "    r.setPosition( pos )",
                    "",
                    "    // get() the pixel at that coordinate and ",
                    "    // set the pixel value via this reference",
                    "    r.get().set( value )",
                    "  }",
                    "}  ",
                    "  }"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "height": 56,
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 606,
                "result": "script1471982749145778841815$1@1b140a41"
            },
            "evaluatorReader": true,
            "lineCount": 37
        },
        {
            "id": "markdownXErDHa",
            "type": "markdown",
            "body": [
                "   // in this example, we use a 3D ARGBType image ",
                "   // (which means a color image with red/green/blue/alpha values)",
                "       "
            ],
            "evaluatorReader": false
        },
        {
            "id": "codebmbgMK",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.type.numeric.real.FloatType",
                    "import net.imglib2.img.array.ArrayImgs",
                    "",
                    "",
                    "long[] dimensions = [400, 320, 5]",
                    "img = ArrayImgs.floats(dimensions)",
                    "//println(img.firstElement().getClass())",
                    "//value = new ARGBType( 0xffffffff )",
                    "stuff.draw( img, new FloatType(255f))",
                    "notebook.display( img )"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "ImageIcon",
                    "imageData": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAFACAYAAACSgSrjAAAFkElEQVR42u3by67qOhBFUf//T4NopIOEiBLFrlUeVxrte7bzmC4DY4zxAoALLMIvn/+sA4CAADZuCIiHCOsGAgKAgACmJwTEzQ7ufzCBACAgdo0AAgJgwycgAAgIAAgIAAICgIAAICAAbPzNNYsOgIAAICAACAgAAgIAAoJvpQACAoCAACAg4EgK94KAAICAACAggGMlBAQQDgQEAAEBwGQnIMZv6wgIiBeddcH9gYAAICAACAgACAgAAgL4cNv1EBDc7ICAAKeDLdwICAACAo64AAFBaAABAUBAABMkAgIAFoDmO1K7a+uLgAAgINipAgICgIBgGgAQEAAEBMDULyAACAjYFfqb/a0CAgACAoCAAJAbEGeIAJhAfIgHICBe5mIFCAjCBQiIlwmAgIBpxd8LAgKAgIBdPwgIIIrWQUAAEBDI3inapYKAeFn6m8H9LyAACAgACAgAAoKzXUBAAIjYJFpQAAQEAAHB5xTguRQQF42i94n7B0wgAMzfoFskwHESJhA8oLjXEBAABAQAAQEcr8DfgHg4ADCBAKZBBASAhgGxCwDYZqKzUAAUOsIyiQC0n0YsDgCXQmJRACcQ+BYWAAICgICEjtvGcHBk5phOQMBL1b8bAcGDBggIAAICgIAAOGpFQMBLECYFxIMCiC0mEAAEBLtDQEAAEBAwNbk21kFAAEQJAQFAQLCTBAQEoOoGxoanaEBcGAABAQAB8dkCgIAAICAACAgAAgKAz0K//t8uBAAmEAAEBBwtgIAAYiWwAgIAAgKAgOA4AfcZAgJAp4AcOwg7CQBMII4BAAQEAAEBQEAcDTmiAgQEAATEdGEawv1FdEDcRAACAjYJICAAICAACAgAAgKAgAAgIAAgIL6uCiAgAAiIqQTwHhAQAEwgACAgRlUAAUHgAAEBQEDsmE0gACYQAAQEAAFxPAR4HwgIAAIC2EmDgAAgIICJJeZvbrZGbnoAsbsZEOedAJhAABzjCQgAAgKAgACw+VGWCw2AgIBdJggIAAICgIDgOAbgdEC8WAAwgQAgIACOa5eun8UAwAQCYOJJD4gR0VoBJhAAGyMEBAABwe4S1wQBAUBA7PCw5iAgICjWxLVCQAAQEACTUYn1syB42IBFE4iXDO4hEBAAbHwEBAABAUJ2znblAgKAqAoIHlRAQAAQEEwIgIAAICB2u7gOgAkEgCc3gRbHbhrABAJgsykgABSPlcUHO0kQEAAEBAABAUBAnBMDYALxwTCAgAAgIJhuAAEBQEAAQEAAEBAABAQAAQFAQABAQACYERA/CAP8UBUTCAACApgQKHFdLCwAAoJdIe5lBAS8QEBAAOi4gbMgYMICEwgA8zYlFhcwMSEggBc98+4XCwUIHyYQwMsdAQG89BEQDxyAgACAgAAgIAAICAACAoCAAICAACAggN9mISAACIjdDYCAAICAYMKj8X3j3hIQAAQETC4gIAAgIAAICDimAwEBQECwW8U1R0AAQEAAEBAABMS5NHgeEBAABMQOCAATCIANr4AAUCNQFhgAAQFAQAAQEAAEBAA/NRAQAAQEAAHxa3MAAQFAQEwKAJhAcCwJbBEQLxYAAQFAQAAQEAAQEAAEBAABAaDdN1stJvjNDK6VgACQHBC7I9xTICAAICAACAiAY10BAcAEAnZmICAAICAACAgAAgLgszUBAUBAALtSXGsBgfUvGi8eBATsNAEBAUBAwCQDAgJeyCAgXhoAAoKI4d4HAfHQ4xqBgHjwAc+ogLjhrQMgIAAICJioAAEBQEAAEBDAMSYCAsBuGwSLAaYDeGgCccPhxWbdwBEWXj64RxAQANEUEAAEBAABARzdONJBQAAQEAAEBBK/beNIBwSkxQvPuTUgIAAICAAC4pegAJhARBLcowgIAAICQJo34JMCgJompTIAAAAASUVORK5CYII=",
                    "width": 400,
                    "height": 320
                },
                "selectedType": "Image",
                "height": 357,
                "pluginName": "Groovy",
                "shellId": "1614f86f-3a49-4fc0-96ec-8c3bcd2e848b",
                "elapsedTime": 636
            },
            "evaluatorReader": true,
            "lineCount": 10
        },
        {
            "id": "markdownlIXzRt",
            "type": "markdown",
            "body": [
                ">_NOTE:_",
                "> * Besides **setPosition()** in a single or all dimensions, you can also relatively move a [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) in one or all dimensions, or move the [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) pixel-wise in one dimension (Have a look at the [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html) API doc!) Which of those is most efficient depends on the situation.",
                "> T* here is a **setPosition()** version which takes a [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html). Often a situation occurs where you want to position accessor _a_ to the same location as accessor _b._ In this situation you can avoid localizing _b_ into an array and using that array to set the position of _a._ You can simply **a.setPosition( b )** because _b_ is [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html).",
                "> * By _image_, we do not necessarily mean _pixel image._",
                "> * We use the generic parameter **< T extends Type< T > >** instead of **< Type >** throughout ImgLib2 since that allows us to be more type-safe. Imagine implementing an **add(a, b)** method for a certain type: using the simpler generic parameter would not allow us to enforce both parameters to have the same subclass of **Type**!",
                "> * We create as many variables as possible outside of the loop (in particular, objects) since creating objects costs a bit of execution time and can easily dominate the performance of the algorithm if one is not careful about it."
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionYwzbUJ",
            "type": "section",
            "title": "Cursor",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownNWf2i1",
            "type": "markdown",
            "body": [
                "[Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) provides iteration through the [Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html) interface. It can be moved forward to visit all pixels of the image once.  The [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) concept is not limited to pixel images. A [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) can be used to iterate every collection of [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) samples.",
                "",
                "[Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) provides iteration through the [net.imglib2.Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html) interface. **Iterator.fwd()** advances the cursor. **Iterator.hasNext()** returns true if the cursor can be advanced further. Initially, a [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) points before the first element. You have to call **fwd()** once to move to the first element.",
                "",
                "Note, that the ImgLib2 [net.imglib2.Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html) interface is different from Java's [java.util.Iterator](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html). However, for convenience, [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) implements [java.util.Iterator](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html) as well.",
                "",
                "Just like [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html), [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) extends [Sampler](http://javadoc.imagej.net/ImgLib2/net/imglib2/Sampler.html), so you can **get()** the value of the current pixel (respectively sample). It also implements [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html), so you can query the coordinates of the current sample.",
                "",
                "Let's look at an example: We load an image and find the maximum value (the intensity of the brightest pixel)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codePsZDrU",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.Cursor",
                    "import net.imglib2.img.Img",
                    "",
                    " ",
                    "import net.imagej.ImageJ",
                    "",
                    "// create an ImageJ gateway",
                    "ij = new ImageJ()",
                    "",
                    "// load an image of a colorful primate",
                    "path = \"http://wsr.imagej.net/images/mitosis.tif\"",
                    "mitosis = ij.scifio().datasetIO().open(path)",
                    "",
                    "//final Img< UnsignedByteType > img = new ImgOpener().openImg( mitosis,new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );",
                    "      ",
                    "// we get a Cursor from the image",
                    "cursor = ij.cursor();",
                    "int max = 0;",
                    "",
                    "// we iterate over the image ",
                    "while ( cursor.hasNext() ) {",
                    "  // get the value at the current position",
                    "  // (again,this is an instance of the pixel ",
                    "  // value type UnsignedByteType that ",
                    "  // acts as a reference to the pixel)",
                    "  t = cursor.next();",
                    "  max = Math.max( t.get(), max );",
                    "}",
                    "System.out.println( \"max = \" + max );",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": "Evaluation cancelled due to a failure of an earlier cell evaluation"
                },
                "selectedType": "BeakerDisplay",
                "height": 77,
                "pluginName": "Groovy",
                "shellId": "73a52b3c-27d5-47b8-a9ae-1fe9863421d3",
                "elapsedTime": 11784
            },
            "evaluatorReader": true,
            "lineCount": 30
        },
        {
            "id": "markdownaRyqSH",
            "type": "markdown",
            "body": [
                "Let's extend the previous example. Now we are also interested in the coordinates of the maximum. [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) extends the [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) interface which provides methods to get the current location either dimension-by-dimension or all at once.  And let's do this via a generic version; for example, we will not take an **Img< T >** as the parameter, because that would be too restrictive."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeURnKML",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "import net.imglib2.Cursor;",
                    "import net.imglib2.IterableInterval;",
                    "import net.imglib2.img.Img;",
                    "import net.imglib2.img.array.ArrayImgFactory;",
                    "import net.imglib2.io.ImgIOException;",
                    "import net.imglib2.io.ImgOpener;",
                    "import net.imglib2.type.Type;",
                    "import net.imglib2.type.numeric.integer.UnsignedByteType;",
                    " ",
                    "public class FindMaximumValueAndLocationGeneric {",
                    "    // IterableInterval<T> is the most general type to use, but must be Comparable",
                    "    // the return value of findmax is a Cursor<T>, holds value and coordinates",
                    "    public static < T extends Comparable< T > >",
                    "            Cursor< T > findmax( final IterableInterval< T > iterable ) {",
                    "        final Cursor< T > cursor = iterable.cursor();",
                    "        cursor.fwd();",
                    "        Cursor< T > max = cursor.copyCursor();",
                    "      while ( cursor.hasNext() ) {",
                    "        // to remember the maximum, we simply take a new copy ",
                    "        // of the iterating cursor whenever a better max value is found",
                    "        if ( cursor.next().compareTo( max.get() ) > 0 ) {",
                    "                max = cursor.copyCursor();",
                    "        }",
                    "      }",
                    "        return max;",
                    "    }",
                    " ",
                    "    public static void main( final String[] args ) throws ImgIOException {",
                    "        final Img< UnsignedByteType > img = new ImgOpener().openImg( \"graffiti.tif\",",
                    "            new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );",
                    "        // use findmax and get the maximum value and coordinates from the resulting Cursor,",
                    "        // using the dimension-by-dimension getLongPosition() of the Localizable interface",
                    "        final Cursor< UnsignedByteType > max = findmax( img );",
                    "        System.out.println( \"max = \" + max.get().get() );",
                    "        System.out.println( \"found at ( \" + max.getLongPosition( 0 ) + \", \" +",
                    "                                            max.getLongPosition( 1 ) + \")\" );",
                    "    }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": "Evaluation cancelled due to a failure of an earlier cell evaluation"
                },
                "selectedType": "BeakerDisplay",
                "height": 77
            },
            "evaluatorReader": true,
            "lineCount": 38
        },
        {
            "id": "markdown0WQBpZ",
            "type": "markdown",
            "body": [
                "> _NOTE:_",
                "> * The iteration order is subject to implementation, specialized for each memory layout to minimize access time. For example, an [ArrayImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/array/ArrayImg.html) has a different iteration order from a [CellImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/cell/CellImg.html). This is nicely illustrated in [ImgLib2 Example 2b - Duplicating an Img using a different ImgFactory](http://imagej.net/ImgLib2_Examples#Example_2b_-_Duplicating_an_Img_using_a_different_ImgFactory).",
                "> * Typically, there are two variants of [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) available. One that calculates its location per each iteration and one that calculates it only per localization request. The former is more efficient when localization occurs frequently, the latter otherwise. In the maximum-finding example, we use the latter because localization is only required once after the maximum has been found. The former one could be obtained using **localizingCursor()** instead of **cursor()** (see [IterableInterval](http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/IterableInterval.html) API doc)",
                "> * **copyCursor()** is a work-around to circumvent a javac bug with covariant return type overriding. In the future (with JDK7) every [Sampler](http://javadoc.imagej.net/ImgLib2/net/imglib2/Sampler.html) can be copied using **copy()** instead of having specialised **copyCursor()**, **copyRandomAccess()**, … methods."
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownyrt159",
            "type": "markdown",
            "body": [
                "ImgLib2 is not restricted to rasterized images and integer coordinates It also supports continuous images and real-valued coordinates. Examples where this is appropriate are",
                "",
                "* an interpolated image, where an interpolated value can be obtained at any real coordinate. Note that this is a bounded, but continuous image. Thus it is not iterable.",
                "* a procedurally generated image, where a value can be computed at any real coordinate (continuous, unbounded, non-iterable).",
                "* collections of samples taken at arbitrary real coordinates (discrete, bounded, iterable).",
                "",
                "Real equivalents of the [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html) and [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) interfaces have been added by which real-valued coordinates can be accessed, [RealPositionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealPositionable.html) and [RealLocalizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealLocalizable.html), respectively.   [RealPositionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealPositionable.html) extends [Positionable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Positionable.html), because whenever something can be positioned at arbitrary real coordinates, of course it can be positioned to integer coordinates as well.  [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) extends [RealLocalizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealLocalizable.html), as something that is able to provide its integer coordinates is always able to provide them as real coordinates too.",
                "",
                "Both, [RealRandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealRandomAccess.html) and [RealCursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealCursor.html) are [RealLocalizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealLocalizable.html). Note that the inheritance relationship of [Localizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/Localizable.html) and [RealLocalizable](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealLocalizable.html) propagates to the cursors. Every [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) is also a [RealCursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealCursor.html) (because it can provide its current integer coordinates as real coordinates as well). There is no such relationship between [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html) and [RealRandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealRandomAccess.html).",
                "",
                "You can read more about this final topic and see example code [here](http://imagej.net/ImgLib2_-_Accessors#Accessors_for_Continuous_Coordinates)."
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {}
}
