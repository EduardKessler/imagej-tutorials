{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "ImgLib2 \n\nExample 05: Out of bounds",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "sectiondWXqiA",
            "type": "section",
            "title": "Introduction",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdown9dHd5C",
            "type": "markdown",
            "body": [
                "Many algorithms like convolutions require to access pixels outside of an **Interval**, i.e. also pixels outside of an image. In ImgLib2 this is handled using **Views** which convert a **RandomAccessibleInterval** into an infinite **RandomAccessible** using an **OutOfBoundsStrategy**. Those infinite **RandomAccessibles** are able to return pixel values at any arbitrary location.",
                "",
                "*Important: One should never access pixels outside of the defined **Interval** as it will in most cases result in unexpected behavior, depending on the kind of underlying **RandomAccessible**. If it is for example an **Img**, it will return wrong values or throw an exception.*",
                "",
                "Which **OutOfBoundsStrategies** to use depends on task you want to perform. For convolutions we suggest the mirror strategy as it introduces the least artifacts. When working on Fourier images, the periodic strategy applies best as it correctly mimics its spatial properties. Random Value strategies might be useful to avoid accidental correlations and constant value strategies are the most performant and might work well for simple operations or to avoid exceptions when accidental writing or reading outside of the Interval occurs."
            ],
            "evaluatorReader": false
        },
        {
            "id": "section8LHMGc",
            "type": "section",
            "title": "Bootstrap ImageJ",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeGB53Md",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "/////////////////////////////////////////////////////////////////",
                    "// Bootstrap ImageJ. This may take some minutes the first time,",
                    "// but will be fast on subsequent runs on the same computer.",
                    "@GrabResolver(name='imagej', root='http://maven.imagej.net/content/groups/public/')",
                    "@Grab(group='net.imagej', module='imagej', version='2.0.0-rc-50')",
                    "import net.imagej.ImageJ",
                    "/////////////////////////////////////////////////////////////////",
                    "",
                    "///////////////////////////////////////////////////////////////////////////////",
                    "// Define an object which houses some handy notebook functions. In particular,",
                    "// we include a way to display ImgLib images (i.e., RandomAccessibleInterval",
                    "// objects) directly inside the notebook here.",
                    "",
                    "import java.awt.image.BufferedImage",
                    "import net.imagej.display.ColorTables",
                    "import net.imglib2.RandomAccessibleInterval",
                    "import net.imglib2.converter.RealLUTConverter",
                    "import net.imglib2.display.projector.composite.CompositeXYProjector",
                    "import net.imglib2.display.screenimage.awt.ARGBScreenImage",
                    "import net.imglib2.view.Views",
                    "",
                    "notebook = new Object() {",
                    "  BufferedImage display(RandomAccessibleInterval source, double min = 0.0, double max = 255.0) {",
                    "    return display(source, 0, 1, -1, min, max)",
                    "  }",
                    "  BufferedImage display(RandomAccessibleInterval source, int xAxis, int yAxis, int cAxis, double min, double max) {",
                    "    offset = new long[source.numDimensions()]",
                    "    for (int d = 0; d < offset.length; d++) {",
                    "     offset[d] = -source.min(d) ",
                    "    }",
                    "    image = Views.translate(source, offset)",
                    "    ",
                    "    w = (int) image.dimension(xAxis)",
                    "    h = (int) image.dimension(yAxis)",
                    "    c = 1",
                    "    target = new ARGBScreenImage(w, h)",
                    "    converters = new ArrayList<RealLUTConverter>(c);",
                    "    for (int i=0; i<c; i++) {",
                    "      converters.add(new RealLUTConverter(min, max, ColorTables.GRAYS))",
                    "    }",
                    "    proj = new CompositeXYProjector(image, target, converters, cAxis)",
                    "    proj.map()",
                    "    return target.image()",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "script14773255703071499809235$1@d492878",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "4ff3261f-85d3-42e4-b278-c08458f4ae4f",
                "elapsedTime": 24665,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 45
        },
        {
            "id": "sectionypvq97",
            "type": "section",
            "title": "Code",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codex7Gigr",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import io.scif.img.ImgOpener;",
                    "import net.imglib2.RandomAccessible;",
                    "import net.imglib2.img.Img;",
                    "import net.imglib2.type.numeric.real.FloatType;",
                    "import net.imglib2.view.Views;",
                    "import net.imglib2.FinalInterval;",
                    "import net.imglib2.outofbounds.OutOfBoundsConstantValueFactory;",
                    "import net.imglib2.view.ExtendedRandomAccessibleInterval;",
                    "",
                    "// open with ImgOpener as a FloatType",
                    "image = new ImgOpener().openImgs(\"http://samples.fiji.sc/tutorials/DrosophilaWingSmall.tif\", new FloatType()).get(0)",
                    "",
                    "// in order to visualize them, we have to define a new interval",
                    "// on them which can be displayed",
                    "min = new long[image.numDimensions()]",
                    "max = new long[image.numDimensions()]",
                    " ",
                    "for ( int d = 0; d < image.numDimensions(); ++d ) {",
                    "  // we add/subtract another 30 pixels here to illustrate",
                    "  // that it is really infinite and does not only work once",
                    "  min[d] = -image.dimension( d ) - 90",
                    "  max[d] = image.dimension( d ) * 2 - 1 + 90",
                    "}",
                    "",
                    "// define the Interval on the infinite random accessibles",
                    "interval = new FinalInterval(min, max)",
                    "",
                    "// change this variable to switch for different kind of out of bounds display",
                    "type = 1",
                    "",
                    "switch (type) {",
                    "  case 1:",
                    "    // create an infinite view where all values outside of the Interval are 0",
                    "    infinite = Views.extendValue(image, new FloatType(0))",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 2:",
                    "    // create an infinite view where all values outside of the Interval are 128",
                    "    infinite = Views.extendValue(image, new FloatType(128))",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 3:",
                    "    // create an infinite view where all outside values are random in a range of 0-255",
                    "    infinite = Views.extendRandom(image, 0, 255);",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 4:",
                    "    // create an infinite view where all values outside of the Interval are",
                    "    // the mirrored content, the mirror is the last pixel",
                    "    infinite = Views.extendMirrorSingle(image);",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 5:",
                    "    // create an infinite view where all values outside of the Interval are",
                    "    // the mirrored content, the mirror is BEHIND the last pixel,",
                    "    // i.e. the first and last pixel are always duplicated",
                    "    infinite = Views.extendMirrorDouble(image);",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 6:",
                    "    // all values outside of the Interval periodically repeat the image content",
                    "    // (like the Fourier space assumes)",
                    "    infinite = Views.extendPeriodic(image);",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  case 7:",
                    "    // if you implemented your own strategy that you want to instantiate, it will look like this",
                    "    infinite = new ExtendedRandomAccessibleInterval<FloatType, Img<FloatType>>(",
                    "      image, new OutOfBoundsConstantValueFactory<FloatType, Img<FloatType>>(new FloatType(196)));",
                    "    s = Views.interval(infinite, interval)",
                    "    break",
                    "  default:",
                    "    infinite = Views.extendValue(image, new FloatType(0))",
                    "    s = Views.interval(infinite, interval)",
                    "}",
                    "",
                    "notebook.display(s)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "[INFO] Reading IFDs\r\n[INFO] Populating metadata\r\n[INFO] Checking comment style\r\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\r\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\r\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\r\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\r\n"
                        }
                    ],
                    "payload": {
                        "type": "ImageIcon",
                        "imageData": "",
                        "width": 780,
                        "height": 456
                    }
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "4ff3261f-85d3-42e4-b278-c08458f4ae4f",
                "elapsedTime": 1748,
                "height": 607
            },
            "evaluatorReader": true,
            "lineCount": 77
        }
    ],
    "namespace": {}
}
