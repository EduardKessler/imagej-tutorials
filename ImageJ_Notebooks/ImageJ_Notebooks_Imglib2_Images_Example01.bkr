{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "ImgLib2 \n\nExample 01: Opening, creating and displaying images",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "markdown9dHd5C",
            "type": "markdown",
            "body": [
                "Let's get started with ImgLib2 by opening, creating, and displaying images.  You can see these same tutorials on the ImageJ Wiki [here](http://imagej.net/ImgLib2_Examples)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "code1FpEFz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "/////////////////////////////////////////////////////////////////",
                    "// Bootstrap ImageJ. This may take some minutes the first time,",
                    "// but will be fast on subsequent runs on the same computer.",
                    "@GrabResolver(name='imagej', root='http://maven.imagej.net/content/groups/public/')",
                    "@Grab(group='net.imagej', module='imagej', version='2.0.0-rc-50')",
                    "import net.imagej.ImageJ",
                    "/////////////////////////////////////////////////////////////////",
                    "",
                    "///////////////////////////////////////////////////////////////////////////////",
                    "// Define an object which houses some handy notebook functions. In particular,",
                    "// we include a way to display ImgLib images (i.e., RandomAccessibleInterval",
                    "// objects) directly inside the notebook here.",
                    "",
                    "import java.awt.image.BufferedImage",
                    "import net.imagej.display.ColorTables",
                    "import net.imglib2.RandomAccessibleInterval",
                    "import net.imglib2.converter.RealLUTConverter",
                    "import net.imglib2.display.projector.composite.CompositeXYProjector",
                    "import net.imglib2.display.screenimage.awt.ARGBScreenImage",
                    "",
                    "notebook = new Object() {",
                    "  BufferedImage display(RandomAccessibleInterval source) {",
                    "    return display(source, 0, 1, -1)",
                    "  }",
                    "  BufferedImage display(RandomAccessibleInterval source, int xAxis, int yAxis, int cAxis) {",
                    "    w = (int) source.dimension(xAxis)",
                    "    h = (int) source.dimension(yAxis)",
                    "    c = 1",
                    "    target = new ARGBScreenImage(w, h)",
                    "    converters = new ArrayList<RealLUTConverter>(c);",
                    "    for (int i=0; i<c; i++) {",
                    "      converters.add(new RealLUTConverter(0, 255, ColorTables.GRAYS))",
                    "    }",
                    "    proj = new CompositeXYProjector(source, target, converters, cAxis)",
                    "    proj.map()",
                    "    return target.image()",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "result": "script14721434359171453574080$1@4b4b0943",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "afe083bb-d348-449b-b197-1ebb861065a6",
                "elapsedTime": 4577,
                "state": {},
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 38
        },
        {
            "id": "sectionx1BkN6",
            "type": "section",
            "title": "Opening an ImgLib2 image",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdown6fR3Gu",
            "type": "markdown",
            "body": [
                "The typical way to open an image in ImgLib2 is to make use of the [SCIFIO](http://scif.io/) importer. Below you see two examples of how to open an image as (_a_) its own type (e.g. **UnsignedByteType**) and (_b_) as float (**FloatType**). For (_a_) we assume, however, that the file contains some real valued numbers as defined by the interface **RealType**. Color images are opened as well and color is represented as its own dimension (like in the ImageJ Hyperstacks).",
                "",
                "Note that for (_a_) we use an [ArrayImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/array/ArrayImg.html) to hold the data. This means the data is held in one single java basic type array which results in optimal performance. The absolute size of image is, however, limited to 2^31-1 (~2 billion) pixels. The type of [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) to use is set by passing an **ImgOptions** configuration when calling the **ImgOpener**.",
                "",
                "In (_b_) we use a [CellImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/cell/CellImg.html) instead. It partitions the image data into n-dimensional cells each holding only a part of the data. Further, [SCIFIO](http://scif.io/) takes care of caching cells in and out of memory as needed, greatly reducing the memory requirement to work with very large images.",
                "",
                "The SCIFIO importer also requires [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html)s that implement [NativeType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/NativeType.html), which means it is able to map the data into a Java basic type array. All available [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html)s until now are implementing [NativeType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/NativeType.html), if you want to work with some self-developed [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) it would be easiest to copy the opened [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) afterwards. Please also note that until now, the only [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) that supports non-native types is the [ListImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/list/ListImg.html) which stores every pixel as an individual object!",
                "",
                "Important: it does not matter which type of Img you use to hold the data as we will use [Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html)s and [RandomAccess](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccess.html)es to access the image content. It might be, however, important if you work on two Img at the same time using [Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html)s, see Example2."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeyktUb3",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ij.ImageJ",
                    "import io.scif.config.SCIFIOConfig",
                    "import io.scif.config.SCIFIOConfig.ImgMode",
                    "import io.scif.img.ImgIOException",
                    "import io.scif.img.ImgOpener",
                    "import java.io.File",
                    "import net.imglib2.img.Img",
                    "import net.imglib2.img.display.imagej.ImageJFunctions",
                    "import net.imglib2.type.NativeType",
                    "import net.imglib2.type.numeric.RealType",
                    " ",
                    "/**",
                    " * Opens a file with SCIFIO's ImgOpener as an ImgLib2 Img.",
                    " */",
                    "construct03 = new Object() {",
                    "    // within this method we define <T> to be a RealType and a NativeType which means the",
                    "    // Type is able to map the data into an java basic type array",
                    "    public <T extends RealType<T> & NativeType<T>> Example1b() throws ImgIOException {",
                    "        // define the file to open",
                    "        File file = new File( \"DrosophilaWing.tif\" );",
                    "        String path = file.getAbsolutePath();",
                    " ",
                    "        // create the ImgOpener",
                    "        ImgOpener imgOpener = new ImgOpener();",
                    " ",
                    "        // open with ImgOpener. The type (e.g. ArrayImg, PlanarImg, CellImg) is",
                    "        // automatically determined. For a small image that fits in memory, this",
                    "        // should open as an ArrayImg.",
                    "        Img<T> image = (Img<T>) imgOpener.openImg( path );",
                    " ",
                    "        // display it via ImgLib using ImageJ",
                    "        ImageJFunctions.show( image );",
                    " ",
                    "        // create the SCIFIOConfig. This gives us configuration control over how",
                    "        // the ImgOpener will open its datasets.",
                    "        SCIFIOConfig config = new SCIFIOConfig();",
                    " ",
                    "        // If we know what type of Img we want, we can encourage their use through",
                    "        // an SCIFIOConfig instance. CellImgs dynamically load image regions and are",
                    "        // useful when an image won't fit in memory",
                    "        config.imgOpenerSetImgModes( ImgMode.CELL );",
                    " ",
                    "        // open with ImgOpener as a CellImg",
                    "        Img<T> imageCell = (Img<T>) imgOpener.openImg( path, config );",
                    " ",
                    "        // display it via ImgLib using ImageJ. The Img type only affects how the",
                    "        // underlying data is accessed, so these images should look identical.",
                    "        ImageJFunctions.show( imageCell );",
                    "    }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:<br/>script1472145369045744370582.groovy: 20: unexpected token: ( @ line 20, column 61.<br/>   &lt;T&gt; &amp; NativeType&lt;T&gt;&gt; Example1b() throws <br/>                                 ^<br/><br/>1 error<br/><br/>",
                        "\tat com.twosigma.beaker.groovy.utils.GroovyEvaluator$workerThread$MyRunnable.run(GroovyEvaluator.java:366)",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Groovy",
                "shellId": "afe083bb-d348-449b-b197-1ebb861065a6",
                "elapsedTime": 605,
                "height": 177
            },
            "evaluatorReader": true,
            "lineCount": 50
        },
        {
            "id": "codeKkSaHT",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// open an ImageJ window",
                    "new ImageJ();",
                    "// run the example",
                    "new construct03.Example1b();"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:<br/>script14721453722771302179186.groovy: 2: unable to resolve class ImageJ <br/> @ line 2, column 1.<br/>   new ImageJ();<br/>   ^<br/><br/>script14721453722771302179186.groovy: 4: unable to resolve class construct03.Example1b <br/> @ line 4, column 1.<br/>   new construct03.Example1b();<br/>   ^<br/><br/>2 errors<br/><br/>",
                        "\tat com.twosigma.beaker.groovy.utils.GroovyEvaluator$workerThread$MyRunnable.run(GroovyEvaluator.java:366)",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Groovy",
                "shellId": "afe083bb-d348-449b-b197-1ebb861065a6",
                "elapsedTime": 582,
                "height": 273
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "sectionPjsRgN",
            "type": "section",
            "title": "Creating a new ImgLib2 image",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownnEPDrQ",
            "type": "markdown",
            "body": [
                "Another important way to instantiate a new ImgLib2 [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) is to create a new one from scratch. This requires you to define its [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) as well as the [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html) to use. It does additionally need one instance of the [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) that it is supposed to hold.",
                "",
                "Once you have one instance of an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html), it is very easy to create another one using the same [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) and [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html), even if it has a different size. Note that the call [img.firstElement()](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableRealInterval.html#firstElement--) returns the first pixel of any [Iterable](http://javadoc.imagej.net/Java/java/lang/Iterable.html?is-external=true), e.g. an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "coderaV7Np",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ij.ImageJ;",
                    "import net.imglib2.img.Img;",
                    "import net.imglib2.img.ImgFactory;",
                    "import net.imglib2.img.cell.CellImgFactory;",
                    "import net.imglib2.img.display.imagej.ImageJFunctions;",
                    "import net.imglib2.type.numeric.real.FloatType;",
                    " ",
                    "/**",
                    " * Create a new ImgLib2 Img of Type FloatType",
                    " */",
                    "public class Example1c",
                    "{",
                    "    public Example1c()",
                    "    {",
                    "        // create the ImgFactory based on cells (cellsize = 5x5x5...x5) that will",
                    "        // instantiate the Img",
                    "        final ImgFactory< FloatType > imgFactory = new CellImgFactory< FloatType >( 5 );",
                    " ",
                    "        // create an 3d-Img with dimensions 20x30x40 (here cellsize is 5x5x5)Ø",
                    "        final Img< FloatType > img1 = imgFactory.create( new long[]{ 20, 30, 40 }, new FloatType() );",
                    " ",
                    "        // create another image with the same size",
                    "        // note that the input provides the size for the new image as it implements",
                    "        // the Interval interface",
                    "        final Img< FloatType > img2 = imgFactory.create( img1, img1.firstElement() );",
                    " ",
                    "        // display both (but they are empty)",
                    "        ImageJFunctions.show( img1 );",
                    "        ImageJFunctions.show( img2 );",
                    "    }",
                    " ",
                    "    public static void main( String[] args )",
                    "    {",
                    "        // open an ImageJ window",
                    "        new ImageJ();",
                    " ",
                    "        // run the example",
                    "        new Example1c();",
                    "    }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": "Evaluation cancelled due to a failure of an earlier cell evaluation"
                },
                "selectedType": "BeakerDisplay",
                "height": 77
            },
            "evaluatorReader": true,
            "lineCount": 40
        },
        {
            "id": "sectionHxQA0s",
            "type": "section",
            "title": "Displaying images partly using Views",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownpY7Ftb",
            "type": "markdown",
            "body": [
                "By using the concept of [Views](http://javadoc.imagej.net/ImgLib2/net/imglib2/view/Views.html) it is possible to display only parts of the image, display a rotated view, and many more cool things. Note that you can also concatenate them. [Views](http://javadoc.imagej.net/ImgLib2/net/imglib2/view/Views.html) are much more powerful than shown in this example, they will be increasingly used throughout the examples.",
                "",
                "A [View](http://javadoc.imagej.net/ImgLib2/net/imglib2/View.html) almost behaves similar to an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html), and in fact they share important concepts. Both are [RandomAccessible](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccessible.html), and [Views](http://javadoc.imagej.net/ImgLib2/net/imglib2/view/Views.html) that are not infinite are also an [Interval](http://javadoc.imagej.net/ImgLib2/net/imglib2/Interval.html) (i.e. those [Views](http://javadoc.imagej.net/ImgLib2/net/imglib2/view/Views.html) have a defined size) and can therefore be made [Iterable](http://javadoc.imagej.net/Java/java/lang/Iterable.html?is-external=true) (see example 2c). In ImgLib2, all algorithms are implemented for abstract concepts like [RandomAccessible](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccessible.html), [Iterable](http://javadoc.imagej.net/Java/java/lang/Iterable.html?is-external=true) or [Interval](http://javadoc.imagej.net/ImgLib2/net/imglib2/Interval.html). This enables us, as can be seen below, to display a [View](http://javadoc.imagej.net/ImgLib2/net/imglib2/View.html) the exact same way we would also display an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codedZoxTI",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ij.ImageJ;",
                    "import io.scif.img.ImgIOException;",
                    "import io.scif.img.ImgOpener;",
                    "import net.imglib2.RandomAccessibleInterval;",
                    "import net.imglib2.img.Img;",
                    "import net.imglib2.img.display.imagej.ImageJFunctions;",
                    "import net.imglib2.type.numeric.real.FloatType;",
                    "import net.imglib2.view.Views;",
                    " ",
                    "/**",
                    " * Open an ArrayImg< FloatType > and display partly and rotated",
                    " */",
                    "public class Example1d",
                    "{",
                    "    public Example1d() throws ImgIOException",
                    "    {",
                    "        // open file as float with ImgOpener",
                    "        Img< FloatType > img =",
                    "            new ImgOpener().openImg( \"DrosophilaWing.tif\", new FloatType() );",
                    " ",
                    "        // display image",
                    "        ImageJFunctions.show( img );",
                    " ",
                    "        // use a View to define an interval (min and max coordinate, inclusive) to display",
                    "        RandomAccessibleInterval< FloatType > view =",
                    "                Views.interval( img, new long[] { 200, 200 }, new long[]{ 500, 350 } );",
                    " ",
                    "        // display only the part of the Img",
                    "        ImageJFunctions.show( view );",
                    " ",
                    "        // or the same area rotated by 90 degrees (x-axis (0) and y-axis (1) switched)",
                    "        ImageJFunctions.show( Views.rotate( view, 0, 1 ) );",
                    "    }",
                    " ",
                    "    public static void main( String[] args ) throws ImgIOException",
                    "    {",
                    "        // open an ImageJ window",
                    "        new ImageJ();",
                    " ",
                    "        // run the example",
                    "        new Example1d();",
                    "    }",
                    "}"
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 43
        }
    ],
    "namespace": {}
}
