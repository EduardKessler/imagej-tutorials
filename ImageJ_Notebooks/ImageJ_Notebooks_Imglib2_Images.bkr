{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Java",
            "plugin": "Java",
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "text/x-java"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "ImgLib2: Create, Open, & Display an Image",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "codech0r0I",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "/////////////////////////////////////////////////////////////////",
                    "// Bootstrap ImageJ. This may take some minutes the first time,",
                    "// but will be fast on subsequent runs on the same computer.",
                    "@GrabResolver(name='imagej', root='http://maven.imagej.net/content/groups/public/')",
                    "@Grab(group='net.imagej', module='imagej', version='2.0.0-rc-50')",
                    "import net.imagej.ImageJ",
                    "/////////////////////////////////////////////////////////////////",
                    "",
                    "///////////////////////////////////////////////////////////////////////////////",
                    "// Define an object which houses some handy notebook functions. In particular,",
                    "// we include a way to display ImgLib images (i.e., RandomAccessibleInterval",
                    "// objects) directly inside the notebook here.",
                    "",
                    "import java.awt.image.BufferedImage",
                    "import net.imagej.display.ColorTables",
                    "import net.imglib2.RandomAccessibleInterval",
                    "import net.imglib2.converter.RealLUTConverter",
                    "import net.imglib2.display.projector.composite.CompositeXYProjector",
                    "import net.imglib2.display.screenimage.awt.ARGBScreenImage",
                    "",
                    "notebook = new Object() {",
                    "  BufferedImage display(RandomAccessibleInterval source) {",
                    "    return display(source, 0, 1, -1)",
                    "  }",
                    "  BufferedImage display(RandomAccessibleInterval source, int xAxis, int yAxis, int cAxis) {",
                    "    w = (int) source.dimension(xAxis)",
                    "    h = (int) source.dimension(yAxis)",
                    "    c = 1",
                    "    target = new ARGBScreenImage(w, h)",
                    "    converters = new ArrayList<RealLUTConverter>(c);",
                    "    for (int i=0; i<c; i++) {",
                    "      converters.add(new RealLUTConverter(0, 255, ColorTables.GRAYS))",
                    "    }",
                    "    proj = new CompositeXYProjector(source, target, converters, cAxis)",
                    "    proj.map()",
                    "    return target.image()",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "result": "script14720683149231453574080$1@3ee3e3f0",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "ba8861d4-2815-44d7-8bfa-e16b510e334e",
                "elapsedTime": 2326,
                "state": {},
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 38
        },
        {
            "id": "sectionS6UXp3",
            "type": "section",
            "title": "Creating and Displaying an Image",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownBq7a4y",
            "type": "markdown",
            "body": [
                "The following piece of code creates and displays an 400x320 8-bit gray-level image:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMjDEcP",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.img.Img",
                    "import net.imglib2.img.array.ArrayImgFactory",
                    "import net.imglib2.type.numeric.integer.UnsignedByteType",
                    " ",
                    "// will create a window showing a black 400x320 image",
                    "long[] dimensions = [400, 320]",
                    "final Img< UnsignedByteType > img = new ArrayImgFactory< UnsignedByteType >().create( dimensions, new UnsignedByteType() )",
                    "// show image",
                    "notebook.display( img )",
                    ""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Image",
                "pluginName": "Groovy",
                "shellId": "ba8861d4-2815-44d7-8bfa-e16b510e334e",
                "elapsedTime": 579,
                "result": {
                    "type": "ImageIcon",
                    "imageData": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAFACAYAAACSgSrjAAADnElEQVR42u3VIQEAAAjAsPcvDR1QiIkVuHnVAMCBCAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAgIEAYCAAGAgABgKAgQCAgQBgIAAYCAAGAoCBAICBAGAgABgIAAYCgIEAgIEAYCAAGAgABgKAgQCAgQBgIAAYCAAGAoCBAICBAGAgABgIAAYCgIEAgIEAYCAAGAgABgKAgYgAgIEAYCAAGAgABgIABgKAgQBgIAAYCAAGAgAGAoCBAGAgABgIAAYCAAYCgIEAYCAAGAgABgIABgKAgQBgIAAYCAAGAgAGAoCBAGAgABgIAAYCAAYCgIEAYCAAGAgABgIABgKAgQBgIAAYCAAIAICBAGAgABgIAAYCAAYCgIEAYCAAGAgABgIABgKAgQBgIAAYCAAGAgAGAoCBAGAgABgIAAYCAAYCgIEAYCAAGAgABgIABgKAgQBgIAAYCAAGAgAGAoCBAGAgABgIAAYCAAYCgIEAYCAAGAgAGAgABgKAgQBgIAAYCAAYCAAGAoCBAGAgABgIABgIAAYCgIEAYCAAGAgAGAgABgKAgQBgIAAYCAAYCAAGAoCBAGAgABgIABgIAAYCgIEAYCAAGAgAGAgABgKAgQBgIAAgAAAGAoCBAGAgABgIABgIAAYCgIEAYCAAGAgAGAgABgKAgQBgIAAYCAAYCAAGAoCBAGAgABgIABgIAAYCgIEAYCAAGAgAGAgABgKAgQBgIAAYCAAYCAAGAoCBAGAgABgIABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQCACAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAYCAAYCAAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYCgIEAgIEAYCAAGAgABgKAgQCAgQBgIAAYCAAGAoCBAICBAGAgABgIAAYCgIEAgIEAYCAAGAgABgKAgQCAgQBgIAD8sG+VKS+eC1CGAAAAAElFTkSuQmCC",
                    "width": 400,
                    "height": 320
                },
                "height": 357
            },
            "evaluatorReader": true,
            "lineCount": 10
        },
        {
            "id": "markdownHx5dlw",
            "type": "markdown",
            "body": [
                "Breaking _lines 6-9_ into individual steps...",
                "",
                "1 <code>final ImgFactory< UnsignedByteType > factory = new ArrayImgFactory< UnsignedByteType >();</code>",
                "",
                "2 <code>final long[] dimensions = new long[] { 400, 320 };</code>",
                "",
                "3 <code>final UnsignedByteType type = new UnsignedByteType();</code>",
                "",
                "4 <code>final Img< UnsignedByteType > img = factory.create( dimensions, type );</code>",
                ""
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownDGsDma",
            "type": "markdown",
            "body": [
                "_Line 1:_ ",
                "Pixel images in ImgLib2 are created using an [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html). There are different ImgFactories, that create pixel containers with different memory layouts. Here, we create an [ArrayImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/array/ArrayImgFactory.html). This factory creates containers that map to a single flat Java array.",
                "",
                "The type parameter of the factory that specifies the value type of the image we want to create. We want to create a 8-bit gray-level image, thus we use [UnsignedByteType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/integer/UnsignedByteType.html).",
                "",
                "_Line 2:_",
                "Next we create a **long[]** array that specifies the image size in every dimension. The length of the array specifies the number of dimensions. Here, we state that we want to create 400x320 2D image.",
                "",
                "_Line 3:_",
                "We need to provide a type variable, that is a variable having the type that is to be stored in the image. This must match the generic type parameter of the [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html). Thus we create an [UnsignedByteType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/integer/UnsignedByteType.html).  ",
                "",
                "_Line 4:_",
                "We create the image, using the factory, dimensions, and type variable.  We store the result of the **create()** method in an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) variable. [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) is a convenience interface that gathers properties of pixel image containers such as having a number of dimensions, being able to iterate it's pixels, etc."
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionJ61d2l",
            "type": "section",
            "title": "Opening and Displaying Image Files",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownJho4Hm",
            "type": "markdown",
            "body": [
                "You can open image files with [ImgOpener](http://javadoc.imagej.net/SCIFIO/io/scif/img/ImgOpener.html) which is using [Bio-Formats](http://www.openmicroscopy.org/site/support/bio-formats5.1/). The following opens and displays an image file."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codecJRYF3",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imagej.ImageJ",
                    "",
                    "// create an ImageJ gateway",
                    "ij = new ImageJ()",
                    "",
                    "// load an image of Lena",
                    "path = \"http://wsr.imagej.net/images/lena.jpg\"",
                    "lena = ij.scifio().datasetIO().open(path)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "[INFO] Populating metadata\n[INFO] Populating metadata\n"
                        }
                    ],
                    "payload": "http://wsr.imagej.net/images/lena.jpg"
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "ba8861d4-2815-44d7-8bfa-e16b510e334e",
                "elapsedTime": 576,
                "height": 90
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "codedbeqgt",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.img.Img",
                    "import net.imglib2.img.array.ArrayImgFactory",
                    "//import net.imglib2.img.display.imagej.ImageJFunctions",
                    "import io.scif.img.ImgIOException",
                    "import io.scif.img.ImgOpener",
                    "import net.imglib2.type.numeric.integer.UnsignedByteType",
                    "",
                    "            // load image",
                    "            final Img< UnsignedByteType > img = new ImgOpener().openImg( lena, new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );",
                    "            // display the image",
                    "            notebook.display(img)",
                    "    ",
                    "    ",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "groovy.lang.MissingMethodException: No signature of method: io.scif.img.ImgOpener.openImg() is applicable for argument types: (net.imagej.DefaultDataset, net.imglib2.img.array.ArrayImgFactory, net.imglib2.type.numeric.integer.UnsignedByteType) values: [http://wsr.imagej.net/images/lena.jpg, net.imglib2.img.array.ArrayImgFactory@5c28e487, ...]<br/>Possible solutions: openImg(java.lang.String), openImg(io.scif.Reader, io.scif.config.SCIFIOConfig), openImg(java.lang.String, io.scif.config.SCIFIOConfig), openImg(java.lang.String, net.imglib2.img.ImgFactory), openImg(java.lang.String, net.imglib2.type.numeric.RealType), openImg(io.scif.Reader, net.imglib2.type.numeric.RealType, io.scif.config.SCIFIOConfig)<br/>",
                        "\tat script1472069320213224947880.run(script1472069320213224947880.groovy:9)",
                        "\tat com.twosigma.beaker.groovy.utils.GroovyEvaluator$workerThread$MyRunnable.run(GroovyEvaluator.java:378)",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "height": 97,
                "pluginName": "Groovy",
                "shellId": "ba8861d4-2815-44d7-8bfa-e16b510e334e",
                "elapsedTime": 576
            },
            "evaluatorReader": true,
            "lineCount": 14
        },
        {
            "id": "markdownBXkArm",
            "type": "markdown",
            "body": [
                "Again, breaking _lines 12-13_ into individual steps...",
                "",
                "1 <code> final ImgOpener opener = new ImgOpener();</code>",
                "",
                "2 <code> final ImgFactory< UnsignedByteType > factory = new ArrayImgFactory< UnsignedByteType >();</code>",
                "",
                "3 <code> final UnsignedByteType type = new UnsignedByteType();</code>",
                "",
                "4 <code> final Img< UnsignedByteType > img = opener.openImg( \"graffiti.tif\", factory, type );</code>",
                ""
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownZfTQCd",
            "type": "markdown",
            "body": [
                "_Line 1:_",
                "When opening an image, we can specify which memory layout to use and as which value type we want to load the image. We want to use the [ArrayImg](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/array/ArrayImg.html) layout again, and we want to have [UnsignedByteType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/integer/UnsignedByteType.html) values again. We need an [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html) and an instance of the value type.",
                "",
                "_Line 4:_",
                "We can use the **openImg()** method, giving a filename, [ImgFactory](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/ImgFactory.html), and type instance."
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdown4ORHkT",
            "type": "markdown",
            "body": [
                "> _NOTE:_",
                "",
                "> Note that [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) is just convenience interface. When you get more proficient with ImgLib2 you will find yourself using it less and less. You will either be more concrete or more general than that. In the above example, we could be more concrete -- the result of the **ArrayImgFactory< UnsignedByteType >.create()** is actually an **ArrayImg< UnsignedByteType, ByteArray >**. In algorithm implementations, you want to be as generic as possible to not constrain yourself to specific image types. You will specify only the super-interfaces of [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html) that you really need. For instance, if you need something which has boundaries and can be iterated you would use [IterableInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableInterval.html).",
                ""
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {}
}
